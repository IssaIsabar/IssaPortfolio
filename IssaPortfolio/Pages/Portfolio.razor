@page "/portfolio"
@inject PortfolioService PortfolioService;
@using IssaPortfolio.Library;

<head>
    <title>Portfolio</title>
</head>
<body>
    <h1>PortfolioList</h1>
    <br />
    <input class="input" @bind="itemName" type="text" placeholder="Name of item: " />
    <br />
    <input class="input" @bind="description" type="text" placeholder="Description: " />
    <br />
    <input class="input" @bind="imageUrl" type="text" placeholder="Image url: " />
    <br />
    <input class="inputBox" type="button" value="Add" @onclick="async () =>
    {
    await PortfolioService.AddPortfolioItem(itemName, description, imageUrl);
    itemName=string.Empty;
    description=string.Empty;
    imageUrl=string.Empty;
    items = await PortfolioService.LoadPortfolioItems();

    }" />
    <span>@message</span>
    <hr />
    @foreach (var item in items)
    {
        <div class="card text-center" style="width: 18rem;">
            <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name">
            <div class="card-body">
                <h5 class="card-title">@item.Name</h5>
                <p class="card-text">@item.Description</p>
                <input type="button" value="Delete" @onclick="async () =>
            {
            await PortfolioService.DeleteItem(item.Id);
            items = await PortfolioService.LoadPortfolioItems();
            }" />
            </div>
        </div>
    }
    <hr />
</body>

@code {
    List<PortfolioItem>? items = new List<PortfolioItem>();

    string? itemName, description, imageUrl, message;
    string defaultEmptyMessage = "Successful";

    protected override async Task OnInitializedAsync()
    {
        items = await PortfolioService.LoadPortfolioItems();
    }
}
